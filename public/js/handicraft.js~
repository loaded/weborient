
window.onload = function(){

  var Handicraft = (function(){
    let View = {
      config : {
	el : document.getElementById('handicraft'),
        mainWith : window.innerWidth,
	mainHeight : window.innerHeight,
	desktop : 900,
	mainContainer : null,
	header : null
      },

       init : function(){
         this.initialize();
	 this.setMainContainer();
	 this.setHeader();	
      },
      
      initialize : function(){
        this.config.el.style.width = this.config.mainWidth + 'px';
	this.config.el.style.height = this.config.mainHeight + 'px';
	
      },
      
      setHeader : function(){
        let header = document.createElement('div');
        header.classList.add('handi--header');
	this.config.header = header;     
	this.config.mainContainer.appendChild(header);
      },
      
      setMainContainer : function(){
        let container = document.createElement('div');
	container.classList.add('handi--container');
	if(this.isMobile()) 
	    container.style.width = this.config.mainWidth + 'px';
	else
	    container.style.width = this.config.desktop + 'px';
	
	container.style.height = this.config.mainHeight + 'px';
	this.config.mainContainer = container;
	this.config.el.appendChild(container);

      },
      
      isMobile : function(){
        return this.config.mainWidth < this.config.desktop
      },

      uploadView : function(){
        let uploadContainer = document.createElement('div');
	uploadContainer.id = 'handi--upload';
       this.handiUpload = uploadContainer;  
       this.initUploadView(uploadContainer);
       this.config.mainContainer.appendChild(uploadContainer);
      },
    
       initUploadView : function(el){
            _createUploadView(el);  
       }    
    }

                          /* this part is for  public functions that possibly be used in another place */
                                     /*-------------------Upload View ------------------*/
 
   function  _createUploadView(el){
        el.style.width = View.config.desktop + 'px';
        el.style.height = (View.config.mainHeight - 60) + 'px';        
         
        let preview = document.createElement('div');
        _createUploadPreview(preview);
        let space = document.createElement('div');
        _createUploadSpace(space);
        let thumbContainer = document.createElement('div'); 
        _createUploadThumbs(thumbContainer);

     }
    
   function _createUploadPreview(el){
      el.style.width = View.config.desktop + 'px';
      el.style.height  = 2/3 * (View.config.mainHeight - 60) + 'px';
     
      View.handiUpload.appendChild(el);
   }

  function _createUploadSpace(el){
      el.style.width = View.config.desktop + 'px';
      el.style.height = 40 + 'px';
    
      _create_upload_space_buttons(el);
     View.handiUpload.appendChild(el);
  }

  function _createUploadThumbs(el){
    el.style.height =(1/3*(View.config.mainHeight -60) - 40) + 'px';
    el.style.width = View.config.desktop + 'px';
    el.style.borderTop = '1px solid grey';
    View.handiUpload.appendChild(el);
  }


  function _create_upload_space_buttons(parent){
     let buttonContainer = document.createElement('div');
     buttonContainer.classList.add('handi--container-spaceContainer');

     let remove = document.createElement('div');
     let upload = document.createElement('div');
     let browse = document.createElement('div');

     remove.innerHTML = 'remove';
     upload.innerHTML = 'upload';
     browse.innerHTML = 'browse';    

     buttonContainer.appendChild(remove);
     buttonContainer.appendChild(upload);
     buttonContainer.appendChild(browse); 
     

     Array.from(buttonContainer.children).forEach((child,index)=>{
       child.classList.add('handi--container-spacebtns') ;
       child.addEventListener('mouseenter',_handle_upload_btns_mouseenter.bind(child));
       child.addEventListener('mouseleave',_handle_upload_btns_mouseleave.bind(child));
       child.addEventListener('click',_handle_upload_space_click.bind(child));
     })

     let input = document.createElement('input');
     input.type = 'file';
     input.multiple = 'multiple';

     input.style.display = 'none';
     input.addEventListener('change',_get_and_save_files);
     View.input = input;
     parent.appendChild(input);
     
     browse.style.borderTop = '2px solid green';
     parent.appendChild(buttonContainer);
   
  }

 function _handle_upload_space_click(){
    switch(this.innerHTML){
      case 'remove':
            break;
      case 'upload' : 
           break;
      case 'browse' :         
       $(View.input).trigger('click');
         break;
      default : 
        break;
   }  
 }

 function _handle_upload_btns_mouseenter(){
   switch(this.innerHTML){
     case 'remove' : 
         this.style.borderTop = "2px solid tomato";
         break; 
    case 'upload' :
        this.style.borderTop = "2px solid green";
       break;
    case 'browse' : 
       this.style.borderTop = "2px solid green";
      break;
   default : 
       break;
   }
 }

 function _handle_upload_btns_mouseleave(){
   this.style.borderTop = "1px solid grey"
 }

 function _get_and_save_files(e){
   let files = e.target.files;
   let doWork = function(){
     let reader = new FileReader();
     reader.onload = function(e){
                     
            var view = new DataView(e.target.result);
        if (view.getUint16(0, false) != 0xFFD8)
        {
            return callback(-2);
        }
        var length = view.byteLength, offset = 2;
        while (offset < length) 
        {
            if (view.getUint16(offset+2, false) <= 8) return callback(-1);
            var marker = view.getUint16(offset, false);
            offset += 2;
            if (marker == 0xFFE1) 
            {
                if (view.getUint32(offset += 2, false) != 0x45786966) 
                {
                    return callback(-1);
                }

                var little = view.getUint16(offset += 6, false) == 0x4949;
                offset += view.getUint32(offset + 4, little);
                var tags = view.getUint16(offset, little);
                offset += 2;
                for (var i = 0; i < tags; i++)
                {
                    if (view.getUint16(offset + (i * 12), little) == 0x0112)
                    {
                        return callback(view.getUint16(offset + (i * 12) + 8, little));
                    }
                }
            }
            else if ((marker & 0xFF00) != 0xFF00)
            {
                break;
            }
            else
            { 
                offset += view.getUint16(offset, false);
            }
        }
        return callback(-1);
     }
   }
 }
                        /* this is Controller and Collection part of the code */

    
    let controller = (function(){
      View.init();
      View.uploadView();
    })()

  })()
}
